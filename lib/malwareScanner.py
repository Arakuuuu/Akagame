import os
import hashlib
import re
import psutil

class MalwareScanner:
    def __init__(self, directory=None):
        self.directory = directory if directory else os.getcwd()
        self.suspicious_patterns = {
            'network': [
                re.compile(r'socket\.(connect|listen)', re.IGNORECASE),
                re.compile(r'https?:\/\/[^\/]+\.[a-z]{2,}', re.IGNORECASE),
                re.compile(r'net\.(createServer|createConnection)', re.IGNORECASE)
            ],
            'system': [
                re.compile(r'process\.(kill|exit)', re.IGNORECASE),
                re.compile(r'import\s+subprocess', re.IGNORECASE),
                re.compile(r'os\.(system|popen)', re.IGNORECASE)
            ],
            'fileOps': [
                re.compile(r'open\(|write\(|remove\(|chmod\(', re.IGNORECASE),
                re.compile(r'import\s+cryptography', re.IGNORECASE)
            ],
            'persistence': [
                re.compile(r'registry|HKEY_', re.IGNORECASE),
                re.compile(r'\/etc\/cron', re.IGNORECASE)
            ],
            'obfuscation': [
                re.compile(r'eval\(|exec\(', re.IGNORECASE),
                re.compile(r'fromCharCode|base64', re.IGNORECASE)
            ]
        }
        self.suspicious_extensions = {
            '.exe', '.dll', '.bat', '.cmd', '.vbs', '.pyc', '.jar', '.ps1'
        }
        self.known_malware_hashes = {
            # Example hashes
            'e1112134227bf8c2e4b9f14d3cb8129f',
            '7b52009b64fd0a2a49e6d8a939753077'
        }

    def calculate_entropy(self, data):
        from math import log2
        frequency = [0] * 256
        for byte in data:
            frequency[byte] += 1
        entropy = 0
        length = len(data)
        for freq in frequency:
            if freq > 0:
                probability = freq / length
                entropy -= probability * log2(probability)
        return entropy

    def analyze_file_structure(self, file_path):
        suspicious = []
        with open(file_path, 'rb') as file:
            buffer = file.read(1024)
            if buffer[:2] == b'MZ':
                suspicious.append('Windows executable detected')
            if buffer[:4] == b'\x7fELF':
                suspicious.append('Linux executable detected')
            entropy = self.calculate_entropy(buffer)
            if entropy > 7.5:
                suspicious.append('High entropy detected - possible encryption or packing')
        return suspicious

    def analyze_content(self, file_path):
        suspicious = []
        with open(file_path, 'r', errors='ignore') as file:
            content = file.read()
            for category, patterns in self.suspicious_patterns.items():
                for pattern in patterns:
                    if pattern.search(content):
                        suspicious.append(f'Suspicious {category} pattern detected')
        return suspicious

    def calculate_file_hash(self, file_path):
        hasher = hashlib.sha256()
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b''):
                hasher.update(chunk)
        return hasher.hexdigest()

    def is_malware(self, file_path):
        try:
            threats = []
            threats.extend(self.analyze_file_structure(file_path))
            threats.extend(self.analyze_content(file_path))
            file_hash = self.calculate_file_hash(file_path)
            if file_hash in self.known_malware_hashes:
                threats.append('Matched known malware signature')
            return {
                'detected': bool(threats),
                'threats': threats,
                'risk_level': self.calculate_risk_level(threats)
            }
        except Exception as e:
            print(f"Error scanning file {file_path}: {e}")
            return {'detected': False, 'threats': [], 'risk_level': 'unknown'}

    def calculate_risk_level(self, threats):
        if not threats:
            return 'safe'
        if len(threats) <= 2:
            return 'low'
        elif len(threats) <= 4:
            return 'medium'
        return 'high'

    def scan_files(self):
        results = []
        scanned_files = 0
        print('\nStarting comprehensive malware scan...')
        print('Scanning directory:', self.directory)
        for root, dirs, files in os.walk(self.directory):
            for file in files:
                file_path = os.path.join(root, file)
                scanned_files += 1
                print(f'\rFiles scanned: {scanned_files}', end='')
                if os.path.splitext(file)[1].lower() in self.suspicious_extensions:
                    scan_result = self.is_malware(file_path)
                    if scan_result['detected']:
                        results.append({
                            'path': file_path,
                            'threats': scan_result['threats'],
                            'risk_level': scan_result['risk_level']
                        })
        print('\n\nScan completed!')
        if results:
            for i, result in enumerate(results, 1):
                print(f"\n{i}. {result['path']}")
                print(f"   Risk Level: {result['risk_level']}")
                print('   Threats:')
                for threat in result['threats']:
                    print(f"   - {threat}")
        else:
            print('\nNo suspicious files detected. Your system appears to be clean!')

# Run this if executed as the main script
if __name__ == "__main__":
    scanner = MalwareScanner('/path/to/scan')
    scanner.scan_files()
